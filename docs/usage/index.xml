<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Usage on</title><link>https://doks-child-theme.netlify.app/docs/usage/</link><description>Recent content in Usage on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 25 Jan 2022 14:40:56 +0100</lastBuildDate><atom:link href="https://doks-child-theme.netlify.app/docs/usage/index.xml" rel="self" type="application/rss+xml"/><item><title>Environment variables</title><link>https://doks-child-theme.netlify.app/docs/usage/environment-variables/</link><pubDate>Mon, 27 Mar 2023 13:59:39 +0100</pubDate><guid>https://doks-child-theme.netlify.app/docs/usage/environment-variables/</guid><description>Overview #
ðŸ‘‰ This section assumes you have already run 'make all' or 'make env' command from root project directory. Project has built-in support for environment variables. Freshly cloned project uses 3 of them.
GODOG_DEBUG=false GODOG_MY_APP_URL=http://localhost:1234 GODOG_JSON_SCHEMA_DIR=./assets/test_server/doc/schema which can be found in .env file.
Further usage #
You can add/modify/remove any environment variables. In code, current environment variables are defined at top of main_test.go file
const ( //envDebug describes environment variable responsible for debug mode - (true/false).</description></item><item><title>CLI: godog</title><link>https://doks-child-theme.netlify.app/docs/usage/godog-cli/</link><pubDate>Mon, 27 Mar 2023 13:59:39 +0100</pubDate><guid>https://doks-child-theme.netlify.app/docs/usage/godog-cli/</guid><description>Description #
Godog CLI is program that knows how to run tests written with gherkin/cucmber syntax. Under the hood it uses GoLang.
ðŸ‘‰ Godog CLI is depreciated method for running tests, see https://github.com/cucumber/godog/discussions/478 ðŸ‘‰ This section assumes you have already run 'make all' or 'make download-dependencies' command from root project directory and have globally visible godog binary in your shell. Usages #
Project&amp;rsquo;s Makefile contains command that demonstrates usage of godog CLI to run tests:</description></item><item><title>CLI: go</title><link>https://doks-child-theme.netlify.app/docs/usage/go-cli/</link><pubDate>Mon, 27 Mar 2023 13:59:39 +0100</pubDate><guid>https://doks-child-theme.netlify.app/docs/usage/go-cli/</guid><description>Description #
Go CLI is a tool shipped with GoLang installation. It contains various commands for working with your Go projects.
ðŸ‘‰ Go CLI is recommended method for running tests. ðŸ‘‰ This section assumes you have already run 'make all' or 'make download-dependencies' command from root project directory. Usages #
To run all tests:
go test To run all tests in random order marked with tag wip asynchronously using 2 CPUs:</description></item><item><title>Debugging</title><link>https://doks-child-theme.netlify.app/docs/usage/debugging/</link><pubDate>Mon, 27 Mar 2023 13:59:39 +0100</pubDate><guid>https://doks-child-theme.netlify.app/docs/usage/debugging/</guid><description>Writing tests especially in the beginning is not easy. That is why framework is developed with debugging in mind.
Service responsible for debugging is Debugger.
In code, inside methods, it usually looks like this:
if s.Debugger.IsOn() { command, _ := http2curl.GetCurlCommand(req) s.Debugger.Print(command.String()) } Whenever you write your own custom methods, add similar code to provide additional info while working with turned on debugging mode.
If you want to debug scenario, first thing you want to do is to selectively run feature.</description></item></channel></rss>