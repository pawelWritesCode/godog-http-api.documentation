<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Prologue on</title><link>https://doks-child-theme.netlify.app/docs/prologue/</link><description>Recent content in Prologue on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://doks-child-theme.netlify.app/docs/prologue/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://doks-child-theme.netlify.app/docs/prologue/introduction/</link><pubDate>Mon, 27 Mar 2023 08:48:57 +0000</pubDate><guid>https://doks-child-theme.netlify.app/docs/prologue/introduction/</guid><description>Properly coded solution and tests proving it are equally important if we aim for reliable code, that is maintanable, easy to understand and modify.
One of mandatory tasks to achieve it, is to find proper tool, which will be used to write tests.
Godog is one of possibilities. It is implementation of gherkin syntax in GoLang. Tests following gherkin syntax are easy to read for anyone, because they are like common, well known sentences.</description></item><item><title>Quick Start</title><link>https://doks-child-theme.netlify.app/docs/prologue/quick-start/</link><pubDate>Mon, 27 Mar 2023 13:59:39 +0100</pubDate><guid>https://doks-child-theme.netlify.app/docs/prologue/quick-start/</guid><description>Prerequisites #
Git GoLang 1.19+ Docker with built-in compose command (optional) Makefile support (optional) Setup #
Note: Some users may require to run commands with sudo
git clone https://github.com/pawelWritesCode/godog-http-api.git &amp;amp;&amp;amp; cd godog-http-api Next run all command:
make all Afterwards you can run tests using 3 distinct ways
Local OS #
make tests-using-host Docker #
make tests-using-docker Docker compose #
make tests-using-compose For more usage examples examine Usage section.
From now on, you can write your own tests (files with *.</description></item><item><title>Overview</title><link>https://doks-child-theme.netlify.app/docs/prologue/overview/</link><pubDate>Mon, 27 Mar 2023 13:59:39 +0100</pubDate><guid>https://doks-child-theme.netlify.app/docs/prologue/overview/</guid><description>Unmodified cloned project #
. â”œâ”€â”€ assets â”‚Â â”œâ”€â”€ gifs â”‚Â â”œâ”€â”€ svg â”‚Â â””â”€â”€ test_server â”œâ”€â”€ compose.yaml â”œâ”€â”€ defs â”‚Â â””â”€â”€ scenario.go â”œâ”€â”€ Dockerfile â”œâ”€â”€ features â”‚Â â”œâ”€â”€ 7timer â”‚Â â”œâ”€â”€ helium â”‚Â â”œâ”€â”€ httpbin â”‚Â â””â”€â”€ test_server â”œâ”€â”€ go.mod â”œâ”€â”€ go.sum â”œâ”€â”€ LICENSE â”œâ”€â”€ main_test.go â”œâ”€â”€ Makefile â””â”€â”€ README.MD ðŸ‘‰ Above structure contains directories and files that you won't need in long run. However, It's convenient to play around before stripping them.</description></item><item><title>Next steps</title><link>https://doks-child-theme.netlify.app/docs/prologue/next-steps/</link><pubDate>Mon, 27 Mar 2023 15:21:01 +0200</pubDate><guid>https://doks-child-theme.netlify.app/docs/prologue/next-steps/</guid><description>Until now, you should have at least basic understanding how to get your own copy of project and how to run pre-defined tests shipped with it.
Now, you should move to Usage section to understand how tests can be run in different ways. Debugging is also explained there.
Next, see Steps definitions to learn how to create your own custom steps if needed and read pre-defined steps documentation.
Lastly, see Utility services.</description></item></channel></rss>