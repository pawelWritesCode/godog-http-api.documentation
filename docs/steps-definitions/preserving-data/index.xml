<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Preserving data on</title><link>https://pawelwritescode.github.io/godog-http-api.documentation/docs/steps-definitions/preserving-data/</link><description>Recent content in Preserving data on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 25 Jan 2022 14:40:56 +0100</lastBuildDate><atom:link href="https://pawelwritescode.github.io/godog-http-api.documentation/docs/steps-definitions/preserving-data/index.xml" rel="self" type="application/rss+xml"/><item><title>Save arbitrary inline data.</title><link>https://pawelwritescode.github.io/godog-http-api.documentation/docs/steps-definitions/preserving-data/save-arbitrary-inline-data/</link><pubDate>Mon, 27 Mar 2023 08:48:57 +0000</pubDate><guid>https://pawelwritescode.github.io/godog-http-api.documentation/docs/steps-definitions/preserving-data/save-arbitrary-inline-data/</guid><description>I save &amp;ldquo;([^&amp;rdquo;])&amp;quot; as &amp;ldquo;([^&amp;rdquo;])&amp;quot; #
This step allows to save arbitrary data from first argument into scenario cache under any key passed as second argument. Argument accepts template values.
Example:
Given I save &amp;quot;application/json&amp;quot; as &amp;quot;CONTENT_TYPE_JSON&amp;quot; Given I save &amp;quot;Pawe≈Ç&amp;quot; as &amp;quot;MY_NAME&amp;quot;</description></item><item><title>Save arbitrary multiline data.</title><link>https://pawelwritescode.github.io/godog-http-api.documentation/docs/steps-definitions/preserving-data/save-arbitrary-multiline-data/</link><pubDate>Mon, 27 Mar 2023 08:48:57 +0000</pubDate><guid>https://pawelwritescode.github.io/godog-http-api.documentation/docs/steps-definitions/preserving-data/save-arbitrary-multiline-data/</guid><description>I save as &amp;ldquo;([^&amp;rdquo;]*)&amp;quot;: #
This step allows to save arbitrary multiline data into scenario cache under any key passed as first argument. DocString accepts template values.
Example:
Given I save as &amp;quot;EMPTY_HEADER_AND_BODY&amp;quot;: &amp;quot;&amp;quot;&amp;quot; { &amp;quot;body&amp;quot;: {}, &amp;quot;headers&amp;quot;: {} } &amp;quot;&amp;quot;&amp;quot;</description></item><item><title>Save data from headers.</title><link>https://pawelwritescode.github.io/godog-http-api.documentation/docs/steps-definitions/preserving-data/save-data-from-headers/</link><pubDate>Mon, 27 Mar 2023 08:48:57 +0000</pubDate><guid>https://pawelwritescode.github.io/godog-http-api.documentation/docs/steps-definitions/preserving-data/save-data-from-headers/</guid><description>I save from the last response header &amp;ldquo;([^&amp;rdquo;])&amp;quot; as &amp;ldquo;([^&amp;rdquo;])&amp;quot; #
This step allows to save given header value from last response.
First argument header &amp;quot;([^&amp;quot;]*)&amp;quot; as should be upper case-sensitive name of header from last HTTP(s) response.
Last argument as &amp;quot;([^&amp;quot;]*)&amp;quot; allows you to pick name under which picked header value will be saved in scenario cache.</description></item><item><title>Save data from last response body.</title><link>https://pawelwritescode.github.io/godog-http-api.documentation/docs/steps-definitions/preserving-data/save-data-from-response-body/</link><pubDate>Mon, 27 Mar 2023 08:48:57 +0000</pubDate><guid>https://pawelwritescode.github.io/godog-http-api.documentation/docs/steps-definitions/preserving-data/save-data-from-response-body/</guid><description>I save from the last response &amp;ldquo;(JSON|YAML|XML|HTML)&amp;rdquo; node &amp;ldquo;([^&amp;rdquo;])&amp;quot; as &amp;ldquo;([^&amp;rdquo;])&amp;quot; #
This steps allows to obtain JSON/YAML/XML/HTML node from last HTTP(s) response and save it in scenario chace under given key.
First argument the &amp;quot;(JSON|YAML|XML|HTML)&amp;quot; node should be expected data format of response body.
Second argument node &amp;quot;([^&amp;quot;]*)&amp;quot; use APIContext&amp;rsquo;s PathFinders utility service. Default setup allows to use syntax from two different libraries (for JSON) and one for YAML and XML, which are described above.</description></item></channel></rss>