<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Utility services on</title><link>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/</link><description>Recent content in Utility services on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 25 Jan 2022 14:40:56 +0100</lastBuildDate><atom:link href="https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/index.xml" rel="self" type="application/rss+xml"/><item><title>Cache</title><link>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/cache/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/cache/</guid><description>Cache of type cache.Cache #
This service preserve data between steps in one scenario.
// Cache is entity that has ability to store/retrieve arbitrary values. type Cache interface { // Save preserve provided value under given key. Save(key string, value interface{}) // GetSaved retrieve value from given key. GetSaved(key string) (interface{}, error) // Reset turns cache into init state - clears all entries. Reset() // All returns all cache entries. All() map[string]interface{} } To replace it with your own implementation use following setter.</description></item><item><title>Debugger</title><link>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/debugger/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/debugger/</guid><description>Debugger of type debugger.Debugger #
This service is useful for debugging. It is self-aware service with mutate state.
// Debugger represents debugger. type Debugger interface { // Print prints provided info. Print(info string) // IsOn tells whether debugging mode is activated. IsOn() bool // TurnOn turns on debugging mode. TurnOn() // TurnOff turns off debugging mode. TurnOff() // Reset resets debugging mode to init state. Reset(isOn bool) } To replace it with your own implementation use following setter.</description></item><item><title>Formatters</title><link>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/formatters/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/formatters/</guid><description>Formatters of struct type Formatters #
Those service are responsible for serialization and deserialization data.
// Formatters is container for entities that know how to serialize and deserialize data. type Formatters struct { // JSON is entity that has ability to serialize and deserialize JSON bytes. JSON formatter.Formatter // YAML is entity that has ability to serialize and deserialize YAML bytes. YAML formatter.Formatter // XML is entity that has ability to serialize and deserialize XML bytes.</description></item><item><title>PathFinders</title><link>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/path-finders/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/path-finders/</guid><description>PathFinders of struct type PathFinders #
Those services allows to query response body tree to obtain nodes.
// PathFinders is container for different data types pathfinders. type PathFinders struct { // JSON is entity that has ability to obtain data from bytes in JSON format. JSON pathfinder.PathFinder // YAML is entity that has ability to obtain data from bytes in YAML format. YAML pathfinder.PathFinder // XML is entity that has ability to obtain data from bytes in XML format.</description></item><item><title>RequestDoer</title><link>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/request-doer/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/request-doer/</guid><description>RequestDoer of type httpctx.RequestDoer #
This service is responsible for sending HTTP requests.
// RequestDoer describes ability to make HTTP(s) requests. type RequestDoer interface { Do(req *http.Request) (*http.Response, error) } To replace it with your own implementation use following setter:
func (apiCtx *APIContext) SetRequestDoer(r httpctx.RequestDoer) Some examples of custom RequestDoer may be:
one with custom timeout one with implemented tracing one with custom http.Transport field</description></item><item><title>SchemaValidators</title><link>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/schema-validators/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/schema-validators/</guid><description>SchemaValidators of struct type SchemaValidators #
Schema validators are responsible for validating payload against json-schema
// SchemaValidators is container for JSON schema validators. type SchemaValidators struct { // StringValidator represents entity that has ability to validate document against string of containing schema. StringValidator validator.SchemaValidator // ReferenceValidator represents entity that has ability to validate document against string with reference // to schema, which may be URL or relative/full OS path for example.</description></item><item><title>TemplateEngine</title><link>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/template-engine/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/template-engine/</guid><description>TemplateEngine of type template.Engine #
This service is responsible for string templating. It allows to inject previously cached/generated data into step&amp;rsquo;s arguments.
// Engine is entity that has ability to work with templates. type Engine interface { // Replace replaces template values using provided storage. Replace(templateValue string, storage map[string]interface{}) (string, error) } To replace it with your own implementation use following setter:
func (apiCtx *APIContext) SetTemplateEngine(t template.Engine) Some examples of custom template engine may be:</description></item><item><title>TypeMappers</title><link>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/type-mappers/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://pawelwritescode.github.io/godog-http-api.github.io/docs/utility-services/type-mappers/</guid><description>TypeMappers of struct type TypeMappers #
Those services are responsible for mapping internal data structures onto different formats data types.
// TypeMappers is container for different data format mappers type TypeMappers struct { // JSON is entity that has ability to map underlying data type into JSON data type JSON types.Mapper // YAML is entity that has ability to map underlying data type into YAML data type YAML types.Mapper // GO is entity that has ability to map underlying data type into GO-like data type GO types.</description></item></channel></rss>